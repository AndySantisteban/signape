/* eslint-disable no-await-in-loop */
const bluebird = require("bluebird");
const haiku = require("./haiku");

/* `const MAX_TRIES = 10;` is setting a constant variable `MAX_TRIES` to the value of 10. This variable
is used as a limit for the number of times the `randomID` function can recursively call itself
before returning `null`. */
const MAX_TRIES = 10;

/* `const users = {};` is initializing an empty object called `users`. This object will be used to
store the socket connections of users who have been assigned a unique ID. The `create` function will
add a new user's socket connection to this object, and the `get` and `remove` functions will
retrieve and delete socket connections from this object, respectively. */
const users = {};

/**
 * This function generates a random ID and checks if it already exists in a users object, and if it
 * does, it recursively generates a new ID until it finds a unique one or reaches a maximum number of
 * tries.
 * @param [counter=0] - counter is a variable that keeps track of the number of times the function has
 * recursively called itself. It is used to limit the number of attempts to generate a unique ID.
 * @returns The function `randomID` returns either a unique ID (a string generated by the `haiku`
 * function) or `null` if it fails to generate a unique ID after a certain number of tries (specified
 * by the `MAX_TRIES` constant).
 */
async function randomID(counter = 0) {
  if (counter > MAX_TRIES) {
    return null;
  }
  await bluebird.delay(10);
  const id = haiku();
  return id in users ? randomID(counter + 1) : id;
}

/* This code exports a function called `create` that takes a `socket` parameter. The function generates
a unique ID using the `randomID` function and assigns the `socket` connection to that ID in the
`users` object. If a unique ID is not generated, the function returns `null`. The function returns
the generated ID if successful. */
exports.create = async (socket) => {
  const id = await randomID();
  if (id) {
    users[id] = socket;
  }
  return id;
};

/* `exports.get` is creating a function that takes an `id` parameter and returns the socket connection
associated with that `id` from the `users` object. The `users` object is a collection of socket
connections, where each connection is associated with a unique ID. This function allows other parts
of the code to retrieve a socket connection by its ID. */
exports.get = (id) => users[id];

/* `exports.remove` is creating a function that takes an `id` parameter and deletes the socket
connection associated with that `id` from the `users` object using the `delete` keyword. This
function allows other parts of the code to remove a socket connection by its ID. */
/* `exports.remove` is creating a function that takes an `id` parameter and deletes the socket
connection associated with that `id` from the `users` object using the `delete` keyword. This
function allows other parts of the code to remove a socket connection by its ID. */
exports.remove = (id) => delete users[id];
